[1.1 Boolean functions] 

--------------------------------------------------------------------------------------
[1.2 Boolean function synthesis]:
	
 -- Goal : `Constructing boolean functions from more primitive operations`

 -- before: `boolean expression -> truth table`

 -- Now: `Truth Table to Boolean expression`
 	
	We start with a description of a function, let's say given as a truth table, and our challenge is to come up with a formula that computes the same boolean function	

	`Why?`

	-- That's exactly what we have to do when we come to design a computer. We know what we want to do, we know what we want a certain unit to do. To do this we compose it from primitive gates, from primitive operations.

----------------------------------------
`Constructing a disjunctive normal form`
----------------------------------------
	-- We actually go row by row in the truth table. We focus only on the rows that have a value of 1.
	--  we write an expression that basically gets a value of 1 only at this row


-- Theorem:
 	Any boolean function can be represented using an expression containing AND, OR and NOT operations

	Proof:	
	
	- OR & NOT : (x OR y) = NOT(NOT(x) AND NOT(y))
	
NAND:
	[x|y|NAND]
	[0|0|1]
	[0|1|1]
	[1|0|1]
	[1|1|0]


	-- (x NAND y) = NOT(x AND y)

-- Theorem : Any Boolean function can be represented using and expression containing only NAND operations
	
	Proof:
	
		1) NOT(x) = (x NAND y)
		2) (x AND y) = NOT(x NAND y)




